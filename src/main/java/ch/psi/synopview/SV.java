package ch.psi.synopview;

/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

/*
** not yet implemented properly...:
**		processInterrestData  ()
**
**
*/

import java.awt.*;
import java.util.*;
import java.lang.String;

class SV extends java.awt.Frame implements SVControlSystem          
{
    // define some Strings for the ResultPanel Buttons
    static String RECONNECT_STRING = "ReConnect";
    static String DISCONNECT_STRING = "DisConnect";
    static String PLEASE_WAIT = "Please wait...";

	// boolean to indicate autoCenter is on or off
	boolean bAutoCenter = false;

	// cdevSystem is the connection to the cdev ControlSystem
	JavaCdev cdevSystem;

	// Synoptic is the ... 
	Synoptic s;

	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu fileMenu = new java.awt.Menu();
	java.awt.MenuItem reconnectCdev = new java.awt.MenuItem();
	java.awt.MenuItem Separator2 = new java.awt.MenuItem("-");
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu viewMenu = new java.awt.Menu();
	java.awt.CheckboxMenuItem treeCheckBox = new java.awt.CheckboxMenuItem("Tree");
	java.awt.CheckboxMenuItem buttonsCheckBox = new java.awt.CheckboxMenuItem("Buttons");
	java.awt.MenuItem Separator1 = new java.awt.MenuItem("-");
	java.awt.CheckboxMenuItem autoCenterCheckBox = new java.awt.CheckboxMenuItem("auto Center");
	java.awt.MenuItem Separator3 = new java.awt.MenuItem("-");
	java.awt.CheckboxMenuItem debugCheckBox = new java.awt.CheckboxMenuItem("Debug Info");
	java.awt.CheckboxMenuItem cdevGetCheckBox = new java.awt.CheckboxMenuItem("single cdevGet calls");
	java.awt.Menu executeMenu = new java.awt.Menu();
	java.awt.Menu helpMenu = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == SV.this)
				SV_WindowClosing(event);
		}
	}
	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
		}
	}


	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == treeCheckBox)
				treeCheckBox_ItemStateChanged(event);
			else if (object == buttonsCheckBox)
				buttonsCheckBox_ItemStateChanged(event);
			else if (object == autoCenterCheckBox)
				autoCenterCheckBox_ItemStateChanged(event);
			else if (object == debugCheckBox)
				debugCheckBox_ItemStateChanged(event);
			else if (object == cdevGetCheckBox)
				cdevGetCheckBox_ItemStateChanged(event);
		}
	}

	public SV(String sHost, int iPort)
	{
	
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setBackground(java.awt.Color.lightGray);
		setSize(403,348);
		setVisible(false);
		setTitle("SLS Synoptic Viewer  v 1.21");
		//}}

		//{{INIT_MENUS
		fileMenu.setLabel("File");
		fileMenu.add(reconnectCdev);
		reconnectCdev.setLabel("reconnect Cdev");
		fileMenu.add(Separator2);
		fileMenu.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(fileMenu);
		viewMenu.setLabel("View");
		treeCheckBox.setLabel("Tree");
		treeCheckBox.setState(true);
		viewMenu.add(treeCheckBox);
		buttonsCheckBox.setLabel("Buttons");
		buttonsCheckBox.setState(true);
		viewMenu.add(buttonsCheckBox);
		viewMenu.add(Separator1);
		viewMenu.add(Separator2);
		autoCenterCheckBox.setLabel("auto Center");
		autoCenterCheckBox.setState(false);
		viewMenu.add(autoCenterCheckBox);
		viewMenu.add(Separator3);
		debugCheckBox.setLabel("Debug Info");
		debugCheckBox.setState(false);
		viewMenu.add(debugCheckBox);
		cdevGetCheckBox.setLabel("single cdevGet calls");
		cdevGetCheckBox.setState(false);
		viewMenu.add(cdevGetCheckBox);
		mainMenuBar.add(viewMenu);
		executeMenu.setLabel("Execute");
		mainMenuBar.add(executeMenu);
		helpMenu.setLabel("Help");
		helpMenu.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(helpMenu);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		treeCheckBox.addItemListener(lSymItem);
		buttonsCheckBox.addItemListener(lSymItem);
		autoCenterCheckBox.addItemListener(lSymItem);
		debugCheckBox.addItemListener(lSymItem);
		cdevGetCheckBox.addItemListener(lSymItem);
		//}}

        //--------------------------------------
	    setSize(800, 600);   // this is needed and set the size
	    s = new Synoptic(this);
	
	    this.add("West",   s.getTreeControl());
	    this.add("Center", s.getDrawingSurface());
	    this.add("South",  s.getStatusBar());
	    this.add("East",   s.getResultPanel());

	    // this code is added manualy to be abled to add menu items to the
	    // Execute menu from the SV_runmenu.txt
	    DefineMenu execMenu = new DefineMenu();
	    execMenu.addRunMenu(executeMenu);

	    // connect to cdevGatewayServer (cdevGateway)
	    // this is used to get the values of the selected device properties...
	    // this = ControlSystem
	    cdevSystem = new JavaCdev(this, sHost, iPort);
	    // get the CLIP connection Status... and
  	    // set the colored cdev status info and enable/disable the reconnect button...
  	    setConnectButton();
 
  	    // read System and Machine Files for the Select Dialog
	    if (s.readMachineFile("SV_machine.txt") != true) {
		  System.out.println("Error:   reading file ... ");
		  SV_exit();
		}
	    if (s.readSystemFile("SV_system.txt") != true) {
		  System.out.println("Error:   reading file ... ");
		  SV_exit();
		}
		// when the Machine and System files are read correct,
		// create the Elements in the SelectDialog
  	    s.createSelectElements();
  	
  	    // read the Interrest file that has the specification of the 
  	    // properties to show for each interrest group
	    if (cdevSystem.readInterrestFile("SV_interest.txt") != true) {
		  System.out.println("Error:   reading file ... ");
		  SV_exit();
		} 	
  	}  
  	
	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}
	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	void autoCenterCheckBox_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		if (event.getStateChange() == event.SELECTED) {
			bAutoCenter = true;
		} else { 
			bAutoCenter = false;
		}			 
	}
	/*
	** menu view buttons ItemStateChenged
	** display or hide the ResultPanel
	*/
	void buttonsCheckBox_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		if (event.getStateChange() == event.SELECTED)
			this.add("East",   s.getResultPanel());
		else
			this.remove(s.getResultPanel());
		this.validate();
	}
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitMenuItem_ActionPerformed_Interaction1(event);
	}
	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
		    (new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	static public void main(String args[])
	{
	  String sHost = null;
	  int iPort = 0;

	  // catch the environment variable passed at startup to SV.
	  // SV_LOG contains the path and filename of the logfile to create.
	  //
	  // When SV_LOG is defined, all System.out.println() write to this file
	  // until SaveOutput.stop is called
	  String sLogFile;
	  try {
	    sLogFile = new String (java.lang.System.getProperty("SV_LOG"));
	  } catch (Exception e) {
		  System.out.println("Warning: To write a logfile, SV_LOG must be passed as argument at program start");
		  // if the env var SV_LOG is not defined at startup, this exception
		  // will be executed and the SV_log.txt will not be stored
		  sLogFile = null;
	  }
	  if (sLogFile != null) {
	    // Start capturing characters into the log file.
	    try {
	      // start write all output and errors to this file
	      System.out.println("Creating Logfile = " + sLogFile);
		  SaveOutput.start(sLogFile);
		  System.out.println("Time = " + new Date()+"\n");
	    } catch (Exception e) {
		  e.printStackTrace();
	    }
      }

	  // Insert code to start the application here.
	  if (args.length == 2) {
		try {
		  sHost = args[0];
		  iPort = Integer.parseInt(args[1]);
		  SV synop_view = new SV(sHost, iPort);
		  synop_view.setVisible(true);

	      if (!synop_view.s.readColorFile("SV_color.txt")) 
		    System.out.println("Error:   reading file ... default color used!");
	
	      if (synop_view.s.readCoordFile("SV_coords.txt") != true) {
		    System.out.println("Error:   reading file ... ");
			SV_exit();
		  }
		} catch (Exception e) {
		  System.out.println("Error:   starting SV... ");
		  System.err.println(e);
		  e.printStackTrace();
		  SV_exit();
		}
	  } else {
	    System.out.println("Error:   starting synoptic viewer\n");
		System.out.println("$SLSBASE must point to the correct location]");
		System.out.println("to start use     SV pcxxxx");
	    System.out.println("or");
	    System.out.println("java [-DSV_DIR=path] -classpath $CLASSPATH:${SLSBASE}/sls/java/lib/cdev.jar:${SLSBASE}/sls/java/lib/sv/sv.jar SV pc2294");
		SV_exit();
	  }
	}
	
	/**
	 * Shows or hides the component depending on the boolean flag b.
	 * @param b  if true, show the component; otherwise, hide the component.
	 * @see java.awt.Component#isVisible
	 */
	public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	  
	static void SV_exit() {
	  // Stop capturing characters into the log file and restore old setup.
	  SaveOutput.stop();
	  //Ensure the application exits with an error condition.
	  System.exit(1);
	}
	void SV_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		SV_WindowClosing_Interaction1(event);
	}
	void SV_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	/*
	** menu view tree ItemStateChenged
	** display or hide the treeContral panel
	*/
	void treeCheckBox_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		if (event.getStateChange() == event.SELECTED)
			this.add("West",   s.getTreeControl());
		else
			this.remove(s.getTreeControl());
		this.validate() ;
	}
    

   /**
     * set the colored cdev status info and enable/disable the reconnect button...
     * depended on the cdevSystem.inConnected()
     */
     public void setConnectButton ()
     {
	    if (cdevSystem.isConnected()) {
	        s.getResultPanel().statusText.setText("cdev connected");
	        s.getResultPanel().statusText.setBackground(Color.green);
	        s.getResultPanel().setConnectButtonLabel(DISCONNECT_STRING);
	    } else {
	        // cdev not connected
	        s.getResultPanel().statusText.setText("cdev not connected");
	        s.getResultPanel().statusText.setBackground(Color.red);
	        s.getResultPanel().setConnectButtonLabel(RECONNECT_STRING);
        }
     }
     

    // here the SVControlSystem Interface method's starts ------------------
    //----------------------------------------------------------------------
    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_baseview() {
		s.getDrawingSurface().sc_baseview();
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_centerDevice() {
        String sDevice = s.getDrawingSurface().getSelectedDevice();
        s.getDrawingSurface().sc_centerDevice(sDevice);
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public boolean sc_getAutoCenter () {
		return bAutoCenter;
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_enableSelectButton(boolean set){
		s.getResultPanel().selectButton.setEnabled(set);
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_hilitedDevice(String deviceName) {
		s.getStatusBar().setText(deviceName);
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_previousView() {
		s.getDrawingSurface().sc_previousView();
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_select() {
		try {
            // show the Select Dialog...
            s.getSelectDialog().setVisible(true);

            // when the select dialog is shown, 
            // the "select" button in the ResultPanel will be disabled
            s.getResultPanel().selectButton.setEnabled(false);

            s.getSelectDialog().setControlSystem(this);

		} catch (Exception e) {
		    System.out.println("Error:   creting Select Dialog..." + e);
		}
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_selectDevice(int machine, int system, boolean visible) {
		//System.out.println("SV.selectDevice m = " +machine+ ", s = "+ (system-1));
		s.setDevicesVisible(machine, system-1, visible);
		s.getDrawingSurface().repaint();
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_setDateandTime(String sDateandTime) {
		// set the current date and time in the status bar
		s.getStatusBar().setTimeText(sDateandTime);
		// older...
		// set the colored cdev status info and enable/disable the reconnect button...
        //setConnectButton(cdevSystem.isConnected());
        // replaced by...
		// set the colored cdev status info and enable/disable the reconnect button...
		// and reconnect cdev System...
        // problem....
        if (! s.getResultPanel().statusText.getText().equals(PLEASE_WAIT)) {
            // cdev is not currently reading results...
  	        // set the colored cdev status info and enable/disable the reconnect button...
  	        setConnectButton();
	    }
        
	}

    /**
     * Set the DeviceName to the Center Button Label 
     * 
     */
	public void sc_setSelectedDeviceLabel(String sDevice) {
		s.getResultPanel().sc_setCenterLabel("center " + sDevice);
	}

    /**
     ** showDeviceProperties() is the equal method as in SV v1.x
     ** called after clicking on a device
     **
     ** parameter: sDevice = Device name specfied as starting argument
     **			like ALIVA-VG-5 ...
     **
     */
    public void sc_showDeviceProperties (String sDevice) {
        // display some info in the cdev info text field and set the collor
        s.getResultPanel().statusText.setText(PLEASE_WAIT);
	    s.getResultPanel().statusText.setBackground(Color.white);
        cdevSystem.sc_showDeviceProperties(sDevice);      
  	    // set the colored cdev status info and enable/disable the reconnect button...
  	    setConnectButton();
    }

    /**
     * When a device is double clicked, the Program defined as CommandLine
     * will be executed (defined in the file SV_coords.txt)
     *
     * This event is executed from the DrawingSurface - MouseClicked...
     */
	public void sc_startPanel(String commandLine) {
		//System.out.println("Info:    startPanel(\""+commandLine+"\")");
		ExecProgram.run(commandLine);
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_zoomIn() {
		s.getDrawingSurface().sc_zoomin();
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
	public void sc_zoomOut() {
		s.getDrawingSurface().sc_zoomout();
	}

    /**
     * Insert the type's description here.
     *
     * 
     */
    public void sc_setTextArea(String sInfo) {
        s.getResultPanel().sc_setTextArea(sInfo);
    }

    /**
     * Insert the type's description here.
     *
     * 
     */
    public void sc_setTextAreaLabel(String sInfo) {
        s.getResultPanel().sc_setTextAreaLabel(sInfo);
    }

    /**
     * Insert the type's description here.
     *
     * 
     */
    public void sc_appendTextArea(String sInfo) {
        s.getResultPanel().sc_appendTextArea(sInfo);
    }

    /**
     * reconnectCdev() is executed when the reconnect/disconnect Button 
     * is pressed in the ResultPanel
     *
     * Interface SVControlSystem
     *
     */
    public void sc_reconnectCdev () {
        if (cdevSystem.isConnected()) {
            // cdev is currently connected, so the "disconnect" buttun was
            // proberly clicked...
            cdevSystem.disconnect();
        } else {
            cdevSystem.sc_reconnectCdev();        
        }
  	    // set the colored cdev status info and enable/disable the reconnect button...
  	    setConnectButton();        
    }

    /**
     * setDebugMode to 
     set debug mode in cdevSystem (JavaCdev) to display or hide
     * additional cdev status info
     *
     * Interface SVControlSystem
     *
     */
    public void sc_setDebugMode(boolean bDebug)
    {
        if (bDebug)
            cdevSystem.setDebug(1);
        else
            // 0 = no debug info... default
            cdevSystem.setDebug(0);
    }
    
    /**
     * setCdevMode to set Cdev mode to send No Block or the get all properties with single call
     * (fot debug ...)
     *
     * Interface SVControlSystem
     *
     */
  public void sc_setCdevMode(boolean bCdevMode) {
        cdevSystem.setCdevMode(bCdevMode);
  }
      
    /**
     * Set the Interest Group for the device properties to the changed group.
     *
     * If there was a device selected, then get the results for this device
     */
    public void sc_setInterrestGroup(String str) {
        cdevSystem.setInterrestGroup(str);
        String sDevice = s.getDrawingSurface().getSelectedDevice();
        if (sDevice != null) {
            // showDeviceProperties() 
            sc_showDeviceProperties (sDevice);
        }
    }

    /**
     * Insert the type's description here.
     *
     * 
     */
    public void sc_addInterrestChoice(String str) {
        s.getResultPanel().addInterrestChoice(str);
    }

    // here the SVControlSystem Interface method's ends ====================
    //======================================================================

	void debugCheckBox_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// return the status of the debug checkbox to the SV class (via SV ControlSystem) 
	    sc_setDebugMode(event.getStateChange() == event.SELECTED); 
        // and clear the TextArea......
	    sc_setTextArea("");

	}


	void cdevGetCheckBox_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// return the status of the cdevMode checkbox to the SV class (via SV ControlSystem) 
        sc_setCdevMode(event.getStateChange() == event.SELECTED);			 
        // and clear the TextArea......
	    sc_setTextArea("");
	}

}
