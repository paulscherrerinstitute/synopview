/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import symantec.itools.awt.ImagePanel;

public class AboutDialog extends Dialog {

	//{{DECLARE_CONTROLS
	java.awt.Label filstLineLabel = new java.awt.Label();
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Label versionLabel = new java.awt.Label();
	java.awt.Label authorLabel2 = new java.awt.Label();
	java.awt.Label authorLabel1 = new java.awt.Label();
	//}}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_WindowClosing(event);
		}
	}

	public AboutDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}
	public AboutDialog(Frame parent, boolean modal)
	{
		super(parent, modal);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.lightGray);
		setSize(228,196);
		setVisible(false);
		filstLineLabel.setText("PSI Synoptic Viewer");
		filstLineLabel.setAlignment(java.awt.Label.CENTER);
		add(filstLineLabel);
		filstLineLabel.setBounds(36,12,166,21);
		okButton.setLabel("OK");
		add(okButton);
		okButton.setBounds(81,156,66,27);
		versionLabel.setText("Version 1.21");
		versionLabel.setAlignment(java.awt.Label.CENTER);
		add(versionLabel);
		versionLabel.setBounds(57,36,124,21);
		authorLabel2.setText("matej.sekoranja@ijs.si");
		authorLabel2.setAlignment(java.awt.Label.CENTER);
		add(authorLabel2);
		authorLabel2.setBounds(26,84,159,27);
		authorLabel1.setText("Marcel.Grunder@psi.ch");
		authorLabel1.setAlignment(java.awt.Label.CENTER);
		add(authorLabel1);
		authorLabel1.setBounds(26,108,159,28);
		setTitle("Synoptic Viewer");
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		//}}

	}
	void AboutDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		AboutDialog_WindowClosing_Interaction1(event);
	}
	void AboutDialog_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
				Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}
	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		okButton_ActionPerformed_Interaction1(event);
	}
	void okButton_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}
	public void setVisible(boolean b)
	{
	    if (b)
	    {
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();

			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}
}
